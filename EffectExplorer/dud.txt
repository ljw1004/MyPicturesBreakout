' The Blank Page item template is documented at http://go.microsoft.com/fwlink/?LinkId=402352&clcid=0x409

Imports System.Numerics
Imports Microsoft.Graphics.Canvas
Imports Microsoft.Graphics.Canvas.Effects
Imports Microsoft.Graphics.Canvas.UI.Xaml
Imports Newtonsoft.Json
Imports Windows.UI
''' <summary>
''' An empty page that can be used on its own or navigated to within a Frame.
''' </summary>
Public NotInheritable Class MainPage
    Inherits Page

    Const CWIDTH = 8
    Const CHEIGHT = 8

    Public WithEvents evm As EffectsViewModel

    Dim surface1a, surface1b, surface2a, surface2b As CanvasRenderTarget
    Dim convolveMatrixEffect1 As ConvolveMatrixEffect
    Dim discreteTransferEffect1 As DiscreteTransferEffect
    Dim displayEffect1 As DpiCompensationEffect
    Dim displayEffect2 As Transform2DEffect

    WithEvents canvas1 As CanvasControl
    WithEvents canvas2 As CanvasControl

    Dim isPointerDown As Boolean
    Dim lastPointerX, lastPointerY As Integer

    Sub New()
        InitializeComponent()
        evm = New EffectsViewModel()
        effects1.DataContext = evm
    End Sub

    Protected Overrides Sub OnNavigatedTo(e As NavigationEventArgs)
        If canvas1 Is Nothing Then
            canvas1 = New CanvasControl
            content1.Child = canvas1
        End If
        If canvas2 Is Nothing Then
            canvas2 = New CanvasControl
            content2.Child = canvas2
        End If
    End Sub

    Protected Overrides Sub OnNavigatedFrom(e As NavigationEventArgs)
        canvas1.RemoveFromVisualTree()
        canvas1 = Nothing
        canvas2.RemoveFromVisualTree()
        canvas2 = Nothing
    End Sub

    Sub Recalculate() Handles evm.NeedsRecalculate
        convolveMatrixEffect1 = New ConvolveMatrixEffect With {.KernelMatrix = evm.model.ConvolveMatrixKernel, .Divisor = evm.model.ConvolveMatrixDivisor, .BorderMode = EffectBorderMode.Hard}
        discreteTransferEffect1 = New DiscreteTransferEffect With {.Source = convolveMatrixEffect1, .RedTable = evm.model.DiscreteTransferTableRed, .GreenTable = evm.model.DiscreteTransferTableGreen, .BlueTable = evm.model.DiscreteTransferTableBlue}

        convolveMatrixEffect1 = New ConvolveMatrixEffect With {
            .KernelMatrix = {2.0F, 2.0F, 2.0F,
                             2.0F, 1.0F, 2.0F,
                             2.0F, 2.0F, 2.0F},
            .Divisor = 18,
            .BorderMode = EffectBorderMode.Hard
            }

        Dim transferTable =
            {
                0F, 0F,    ' 0 live neighbors -> dead cell
                0F, 0F,    ' 1 live neighbors -> dead cell
                0F, 1.0F,  ' 2 live neighbors -> cell keeps its current state
                1.0F, 1.0F,' 3 live neighbors -> live cell
                0F, 0F,    ' 4 live neighbors -> dead cell
                0F, 0F,    ' 5 live neighbors -> dead cell
                0F, 0F,    ' 6 live neighbors -> dead cell
                0F, 0F,    ' 7 live neighbors -> dead cell
                0F, 0F     ' 8 live neighbors -> dead cell
            }


        discreteTransferEffect1 = New DiscreteTransferEffect With {
            .Source = convolveMatrixEffect1,
            .RedTable = transferTable,
            .GreenTable = transferTable,
            .BlueTable = transferTable
        }

        convolveMatrixEffect1.Source = surface1a
        Try
            Using ds = surface2b.CreateDrawingSession()
                ds.DrawImage(discreteTransferEffect1)
            End Using
        Catch ex As Exception
            Debug.WriteLine(ex.Message)
        End Try
        Swap(surface2a, surface2b)

        canvas2.Invalidate()
    End Sub

    Sub Swap(Of T)(ByRef a As T, ByRef b As T)
        Dim x = a : a = b : b = x
    End Sub

    Sub Canvas_CreateResources(sender As CanvasControl, args As Object) Handles canvas1.CreateResources, canvas2.CreateResources
        Const defaultDpi = 96.0F
        If surface1a Is Nothing AndAlso sender Is canvas1 Then surface1a = New CanvasRenderTarget(canvas1, CWIDTH, CHEIGHT, defaultDpi)
        If surface1b Is Nothing AndAlso sender Is canvas1 Then surface1b = New CanvasRenderTarget(canvas1, CWIDTH, CHEIGHT, defaultDpi)
        If surface2a Is Nothing AndAlso sender Is canvas2 Then surface2a = New CanvasRenderTarget(canvas2, CWIDTH, CHEIGHT, defaultDpi)
        If surface2b Is Nothing AndAlso sender Is canvas2 Then surface2b = New CanvasRenderTarget(canvas2, CWIDTH, CHEIGHT, defaultDpi)

        If displayEffect1 Is Nothing Then displayEffect1 = New DpiCompensationEffect With {.SourceDpi = New Vector2(canvas1.Dpi)}
        If displayEffect2 Is Nothing Then displayEffect2 = New Transform2DEffect With {.Source = displayEffect1, .InterpolationMode = CanvasImageInterpolation.NearestNeighbor}
    End Sub


    Sub Canvas1_Draw(sender As CanvasControl, args As CanvasDrawEventArgs) Handles canvas1.Draw
        displayEffect1.Source = surface1a
        displayEffect2.TransformMatrix = GetDisplayTransform(canvas1.Size, canvas1, CWIDTH, CHEIGHT)
        args.DrawingSession.DrawImage(displayEffect2)
    End Sub

    Sub Canvas2_Draw(sender As CanvasControl, args As CanvasDrawEventArgs) Handles canvas2.Draw
        displayEffect1.Source = surface2a
        displayEffect2.TransformMatrix = GetDisplayTransform(canvas2.Size, canvas2, CWIDTH, CHEIGHT)
        args.DrawingSession.DrawImage(displayEffect2)
    End Sub


    Public Function GetDisplayTransform(controlSize As Size, canvas As ICanvasResourceCreatorWithDpi, designWidth As Integer, designHeight As Integer) As Matrix3x2
        Dim sourceSize As New Vector2(canvas1.ConvertPixelsToDips(designWidth), canvas1.ConvertPixelsToDips(designHeight))
        Dim outputSize = controlSize.ToVector2

        ' Scale the display to fill the control.
        Dim scale = outputSize / sourceSize
        Dim offset = Vector2.Zero

        ' Letterbox Or pillarbox to preserve aspect ratio.
        If scale.X > scale.Y Then
            scale.X = scale.Y
            offset.X = (outputSize.X - sourceSize.X * scale.X) / 2
        Else
            scale.Y = scale.X
            offset.Y = (outputSize.Y - sourceSize.Y * scale.Y) / 2
        End If

        ' TODO #4479 once .NET Native x64 codegen bug is fixed, change this back to:
        'Return Matrix3x2.CreateScale(scale) * Matrix3x2.CreateTranslation(offset)
        Return New Matrix3x2(scale.X, 0, 0, scale.Y, offset.X, offset.Y)
    End Function

    Sub Canvas_PointerPressed(sender As Object, e As PointerRoutedEventArgs) Handles canvas1.PointerPressed
        isPointerDown = True
        lastPointerX = Integer.MaxValue
        lastPointerY = Integer.MaxValue
        ProcessPointerInput(e)
    End Sub

    Sub Canvas_PointerReleased(sender As Object, e As PointerRoutedEventArgs) Handles canvas1.PointerReleased
        isPointerDown = False
    End Sub

    Sub Canvas_PointerMoved(sender As Object, e As PointerRoutedEventArgs) Handles canvas1.PointerMoved
        ProcessPointerInput(e)
    End Sub

    ' Toggles the color of cells when they are clicked on.
    Sub ProcessPointerInput(e As PointerRoutedEventArgs)
        If Not isPointerDown Then Return

        ' Invert the display transform, to convert pointer positions into simulation rendertarget space.
        Dim transform As Matrix3x2
        Matrix3x2.Invert(GetDisplayTransform(canvas1.Size, canvas1, CWIDTH, CHEIGHT), transform)

        For Each point In e.GetIntermediatePoints(canvas1)
            If Not point.IsInContact Then Continue For

            Dim pos = Vector2.Transform(point.Position.ToVector2(), transform)

            Dim x = canvas1.ConvertDipsToPixels(pos.X)
            Dim y = canvas1.ConvertDipsToPixels(pos.Y)

            ' If the point is within the bounds of the rendertarget, and not the same as the last point...
            If x < 0 OrElse y < 0 OrElse x >= CWIDTH OrElse y >= CHEIGHT Then Continue For
            If x = lastPointerX OrElse y = lastPointerY Then Continue For

            surface1a.SetPixelColors({Colors.Red}, x, y, 1, 1)

            lastPointerX = x
            lastPointerY = y
        Next
        canvas1.Invalidate()
        Recalculate()
    End Sub


End Class

Public Class EffectsViewModel
    Implements INotifyPropertyChanged
    Public model As EffectsModel

    Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Public Event NeedsRecalculate As Action

    Sub New()
        Me.New(Nothing)
    End Sub

    Sub New(s As String)
        If s Is Nothing Then model = New EffectsModel Else model = JsonConvert.DeserializeObject(Of EffectsModel)(s)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(NameOf(cmk0)))
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(NameOf(cmk1)))
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(NameOf(cmk2)))
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(NameOf(cmk3)))
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(NameOf(cmk4)))
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(NameOf(cmk5)))
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(NameOf(cmk6)))
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(NameOf(cmk7)))
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(NameOf(cmk8)))
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(NameOf(cmd)))
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(NameOf(dtr)))
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(NameOf(dtg)))
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(NameOf(dtb)))
        RaiseEvent NeedsRecalculate()
    End Sub

    Function Serialize() As String
        Return JsonConvert.SerializeObject(model)
    End Function

    Public Property cmk0 As Single
        Get
            Return model.ConvolveMatrixKernel(0)
        End Get
        Set(value As Single)
            model.ConvolveMatrixKernel(0) = value
            RaiseEvent NeedsRecalculate()
        End Set
    End Property

    Public Property cmk1 As Single
        Get
            Return model.ConvolveMatrixKernel(1)
        End Get
        Set(value As Single)
            model.ConvolveMatrixKernel(1) = value
            RaiseEvent NeedsRecalculate()
        End Set
    End Property

    Public Property cmk2 As Single
        Get
            Return model.ConvolveMatrixKernel(2)
        End Get
        Set(value As Single)
            model.ConvolveMatrixKernel(2) = value
            RaiseEvent NeedsRecalculate()
        End Set
    End Property

    Public Property cmk3 As Single
        Get
            Return model.ConvolveMatrixKernel(3)
        End Get
        Set(value As Single)
            model.ConvolveMatrixKernel(3) = value
            RaiseEvent NeedsRecalculate()
        End Set
    End Property

    Public Property cmk4 As Single
        Get
            Return model.ConvolveMatrixKernel(4)
        End Get
        Set(value As Single)
            model.ConvolveMatrixKernel(4) = value
            RaiseEvent NeedsRecalculate()
        End Set
    End Property

    Public Property cmk5 As Single
        Get
            Return model.ConvolveMatrixKernel(5)
        End Get
        Set(value As Single)
            model.ConvolveMatrixKernel(5) = value
            RaiseEvent NeedsRecalculate()
        End Set
    End Property

    Public Property cmk6 As Single
        Get
            Return model.ConvolveMatrixKernel(6)
        End Get
        Set(value As Single)
            model.ConvolveMatrixKernel(6) = value
            RaiseEvent NeedsRecalculate()
        End Set
    End Property

    Public Property cmk7 As Single
        Get
            Return model.ConvolveMatrixKernel(7)
        End Get
        Set(value As Single)
            model.ConvolveMatrixKernel(7) = value
            RaiseEvent NeedsRecalculate()
        End Set
    End Property

    Public Property cmk8 As Single
        Get
            Return model.ConvolveMatrixKernel(8)
        End Get
        Set(value As Single)
            model.ConvolveMatrixKernel(8) = value
            RaiseEvent NeedsRecalculate()
        End Set
    End Property

    Public Property cmd As Integer
        Get
            Return model.ConvolveMatrixDivisor
        End Get
        Set(value As Integer)
            model.ConvolveMatrixDivisor = value
            RaiseEvent NeedsRecalculate()
        End Set
    End Property

    Public Property dtr As String
        Get
            Return String.Join(", ", model.DiscreteTransferTableRed)
        End Get
        Set(value As String)
            model.DiscreteTransferTableRed = value.Split(",").Select(Function(v) Single.Parse(v.Trim())).ToArray()
            RaiseEvent NeedsRecalculate()
        End Set
    End Property

    Public Property dtg As String
        Get
            Return String.Join(", ", model.DiscreteTransferTableGreen)
        End Get
        Set(value As String)
            model.DiscreteTransferTableGreen = value.Split(",").Select(Function(v) Single.Parse(v.Trim())).ToArray()
            RaiseEvent NeedsRecalculate()
        End Set
    End Property

    Public Property dtb As String
        Get
            Return String.Join(", ", model.DiscreteTransferTableBlue)
        End Get
        Set(value As String)
            model.DiscreteTransferTableBlue = value.Split(",").Select(Function(v) Single.Parse(v.Trim())).ToArray()
            RaiseEvent NeedsRecalculate()
        End Set
    End Property
End Class

Public Class EffectsModel
    Public ConvolveMatrixKernel As Single() = {1, 2, 1, 2, 4, 2, 1, 2, 1}
    Public ConvolveMatrixDivisor As Integer = 16
    Public DiscreteTransferTableRed As Single() = {0, 0.1, 0.9, 1.0}
    Public DiscreteTransferTableGreen As Single() = {0, 0.1, 0.9, 1.0}
    Public DiscreteTransferTableBlue As Single() = {0, 0.1, 0.9, 1.0}
End Class
